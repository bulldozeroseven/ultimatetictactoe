{"version":3,"sources":["components/Square.jsx","components/TTT.jsx","components/UTTT.jsx","components/UUTTT.jsx","components/Board.jsx","index.js"],"names":["Square","props","className","onClick","TTT","i","this","handleClick","table_rows","table_row","j","color","squares","push","style","renderSquare","React","Component","UTTT","bgcolor","calculateTTTWinner","activeTTT","activeUTTT","boardNumber","k","UUTTT","calculateUTTTWinner","calculateUUTTTWinner","l","Board","arr0","arr1","arr2","state","newState","xIsNext","setState","winner","slice","isUTTTFull","isTTTFull","updateState","isUUTTTFull","window","confirm","a","getRandomInt","c","b","foundWin","lines","length","full","min","max","Math","ceil","floor","random","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.91a1889f.chunk.js","sourcesContent":["export default function Square(props) {\r\n  return (\r\n      <button className='square' onClick={props.onClick} />\r\n  );\r\n}","import React from 'react';\r\nimport { calculateTTTWinner } from '..';\r\nimport Square from './Square';\r\n\r\nclass TTT extends React.Component {\r\n  handleClick(i) {\r\n      this.props.onClick(i);\r\n  }\r\n\r\n  renderSquare(i) {\r\n      return (\r\n          <Square\r\n              onClick={() => this.handleClick(i)}\r\n          />\r\n      );\r\n  }\r\n\r\n  render() {\r\n      let table_rows = [];\r\n      for (let i = 0; i < 3; i += 1) {\r\n          let table_row = [];\r\n          for (let j = 0; j < 3; j += 1) {\r\n              let color = this.props.squares[3 * i + j];\r\n              if (color !== 'blue' && color !== 'red') {\r\n                  color = 'white'\r\n              }\r\n              table_row.push(\r\n                  <td style={{'background' : color}}>\r\n                      {this.renderSquare(3 * i + j)}\r\n                  </td>\r\n              );\r\n          }\r\n          table_rows.push(\r\n              <tr className='board-row'>\r\n                  {table_row}\r\n              </tr>\r\n          );\r\n      }\r\n\r\n      return (\r\n          <table className='small'>\r\n              <tbody>\r\n                  {table_rows}\r\n              </tbody>\r\n          </table>\r\n      );\r\n  }\r\n}\r\n\r\nexport default TTT;","import React from 'react';\r\nimport TTT from './TTT';\r\nimport { calculateTTTWinner } from '..';\r\n\r\nclass UTTT extends React.Component {\r\n  handleClick(i, j) {\r\n      this.props.onClick(i, j);\r\n  }\r\n\r\n  render() {\r\n      let table_rows = [];\r\n      for (let i = 0; i < 3; i += 1) {\r\n          let table_row = [];\r\n          for (let j = 0; j < 3; j += 1) {\r\n              let bgcolor = calculateTTTWinner(this.props.squares[ 3 * i + j]);\r\n              if (!bgcolor) {\r\n                  if (this.props.activeTTT === 3 * i + j && this.props.activeUTTT === this.props.boardNumber) {\r\n                      bgcolor = \"yellow\"\r\n                  } else {\r\n                      bgcolor = \"white\"\r\n                  }\r\n              }\r\n              table_row.push(\r\n                  <td style={{'background' : bgcolor}}>\r\n                      <TTT\r\n                          squares={this.props.squares[3 * i + j]}\r\n                          onClick={(k) => this.handleClick(3 * i + j, k)}\r\n                      />\r\n                  </td>\r\n              );\r\n          }\r\n          table_rows.push(\r\n              <tr>\r\n                  {table_row}\r\n              </tr>\r\n          );\r\n      }\r\n\r\n      return (\r\n          <table>\r\n              <tbody>\r\n                  {table_rows}\r\n              </tbody>\r\n          </table>\r\n      );\r\n  }\r\n}\r\n\r\nexport default UTTT;","import React from \"react\";\r\nimport UTTT from \"./UTTT\";\r\nimport { calculateUTTTWinner, calculateUUTTTWinner } from \"..\";\r\n\r\nclass UUTTT extends React.Component {\r\n    \r\n  handleClick(i, j, k) {\r\n      this.props.onClick(i, j, k);\r\n  }\r\n\r\n  render() {\r\n      let table_rows = [];\r\n      for (let i = 0; i < 3; i += 1) {\r\n          let table_row = [];\r\n          for (let j = 0; j < 3; j += 1) {\r\n              let bgcolor = calculateUTTTWinner(this.props.squares[3 * i + j]);\r\n              if (!bgcolor) {\r\n                  if (this.props.activeTTT === null \r\n                      && this.props.activeUTTT === 3 * i + j\r\n                      && !calculateUUTTTWinner(this.props.squares)) {\r\n                      bgcolor = \"yellow\"\r\n                  } else {\r\n                      bgcolor = \"white\"\r\n                  }\r\n              }\r\n              table_row.push(\r\n                  <td style={{'background' : bgcolor}}>\r\n                      <UTTT\r\n                          boardNumber={3 * i + j}\r\n                          squares={this.props.squares[3 * i + j]}\r\n                          activeUTTT={this.props.activeUTTT}\r\n                          activeTTT={this.props.activeTTT}\r\n                          onClick={(k, l) => this.handleClick(3 * i + j, k, l)}\r\n                      />\r\n                  </td>\r\n              );\r\n          }\r\n          table_rows.push(\r\n              <tr>\r\n                  {table_row}\r\n              </tr>\r\n          );\r\n      }\r\n\r\n      return (\r\n          <table>\r\n              <tbody>\r\n                  {table_rows}\r\n              </tbody>\r\n          </table>\r\n      );\r\n  }\r\n}\r\n\r\nexport default UUTTT;","import React from \"react\";\r\nimport UUTTT from './UUTTT';\r\nimport { calculateTTTWinner, calculateUTTTWinner, calculateUUTTTWinner } from '..';\r\nimport { isTTTFull, isUTTTFull, isUUTTTFull } from '..';\r\nimport { getRandomInt } from '..';\r\n\r\nclass Board extends React.Component {\r\n\r\n  constructor(props) {\r\n      super(props);\r\n      let arr0 = [];\r\n      for (let i = 0; i < 9; i += 1) {\r\n          let arr1 = [];\r\n          for (let j = 0; j < 9; j += 1) {\r\n              let arr2 = [];\r\n              for (let k = 0; k < 9; k += 1) {\r\n                  arr2.push(null);\r\n              }\r\n              arr1.push(arr2);\r\n          }\r\n          arr0.push(arr1);\r\n      }\r\n      this.state = this.newState();\r\n  };\r\n\r\n  newState() {\r\n      let arr0 = [];\r\n      for (let i = 0; i < 9; i += 1) {\r\n          let arr1 = [];\r\n          for (let j = 0; j < 9; j += 1) {\r\n              let arr2 = [];\r\n              for (let k = 0; k < 9; k += 1) {\r\n                  arr2.push(null);\r\n              }\r\n              arr1.push(arr2);\r\n          }\r\n          arr0.push(arr1);\r\n      }\r\n      return({\r\n          xIsNext: true,\r\n          activeTTT: null,\r\n          activeUTTT: null,\r\n          squares: arr0,\r\n      });\r\n  }\r\n\r\n  updateState(xIsNext, activeTTT, activeUTTT, squares) {\r\n      this.setState({\r\n          xIsNext: xIsNext,\r\n          activeTTT: activeTTT,\r\n          activeUTTT: activeUTTT,\r\n          squares: squares,\r\n      });\r\n  }\r\n\r\n  handleClick(i, j, k) {\r\n    if (this.state.squares[i][j][k] !== null) {\r\n      return;\r\n    }\r\n    if (this.state.activeTTT !== null && this.state.activeTTT !== j) {\r\n      return;\r\n    }\r\n    if ((calculateUTTTWinner(this.state.squares[i]) || calculateTTTWinner(this.state.squares[i][j])) !== null) {\r\n        return;\r\n    }\r\n    if (this.state.activeUTTT !== null && this.state.activeUTTT !== i) {\r\n      return;\r\n    }\r\n    const squares = this.state.squares.slice();\r\n    squares[i][j][k] = this.state.xIsNext ? 'blue' : 'red';\r\n    let activeUTTT;\r\n    let activeTTT;\r\n    if (calculateTTTWinner(squares[i][j]) !== null) {\r\n        activeTTT = null;\r\n        if ((calculateUTTTWinner(squares[j]) !== null) || isUTTTFull(squares[j])) {\r\n            activeUTTT = null;\r\n        } else {\r\n            activeUTTT = j;\r\n        }\r\n    } else {\r\n        if ((calculateTTTWinner(squares[i][k]) !== null) || isTTTFull(squares[i][k])) {\r\n            activeTTT = null;\r\n            if ((calculateUTTTWinner(squares[i]) !== null) || isUTTTFull(squares[i])) {\r\n                activeUTTT = null;\r\n            } else {\r\n                activeUTTT = i;\r\n            }\r\n        } else {\r\n            activeTTT = k;\r\n            activeUTTT = i;\r\n        }\r\n    }\r\n    this.updateState(!this.state.xIsNext, activeTTT, activeUTTT, squares);\r\n    let winner;\r\n    if (calculateUUTTTWinner(this.state.squares) === 'blue') {\r\n        winner = \"you won!\";\r\n    } else if (calculateUUTTTWinner(this.state.squares) === 'red') {\r\n        winner = \"you lost!\";\r\n    } else if (isUUTTTFull(this.state.squares)) {\r\n        winner = \"you tied!\";\r\n    }\r\n    if (winner) {\r\n        let restart = window.confirm(winner + '\\n' + \"do you want to restart?\");\r\n        if (restart) {\r\n            this.setState(this.newState())\r\n        }\r\n    } \r\n    return;\r\n  }\r\n\r\n  componentDidUpdate() {\r\n      if (!this.state.xIsNext) {\r\n          let a = this.state.activeUTTT;\r\n          if (a === null || calculateUTTTWinner(this.state.squares[a]) !== null || isUTTTFull(this.state.squares[a])) {\r\n              a = getRandomInt(0, 8);\r\n          }\r\n          let b = this.state.activeTTT;\r\n          while (b === null || calculateTTTWinner(this.state.squares[a][b]) !== null || isTTTFull(this.state.squares[a][b])) {\r\n              b = getRandomInt(0, 8);\r\n          }\r\n          let c;\r\n          let i = 0;\r\n          let foundWin = false;\r\n          while (i < 9 && !foundWin) {\r\n              if (this.state.squares[a][b][i] === null) {\r\n                  const squares = [...this.state.squares[a][b]];\r\n                  squares[i] = 'red';\r\n                  if (calculateTTTWinner(squares) === 'red') {\r\n                      c = i;\r\n                      foundWin = true;\r\n                  }\r\n              }\r\n              i++;\r\n          }\r\n          if (!foundWin) {\r\n              c = getRandomInt(0, 8);\r\n              while (this.state.squares[a][b][c] !== null) {\r\n                  c = getRandomInt(0, 8);\r\n              }\r\n          }\r\n          this.handleClick(a, b, c);\r\n      }\r\n  }\r\n\r\n  render() {\r\n      let bgcolor = calculateUUTTTWinner(this.state.squares);\r\n      if (!bgcolor) {\r\n          if (this.state.activeUTTT === null) {\r\n              bgcolor = \"yellow\"\r\n          } else {\r\n              bgcolor = \"white\"\r\n          }\r\n      }\r\n      return (\r\n          <div>\r\n              <table>\r\n                  <tbody>\r\n                      <tr>\r\n                          <td style={{'background' : bgcolor}}>\r\n                              <UUTTT \r\n                                  squares={this.state.squares}\r\n                                  activeUTTT={this.state.activeUTTT}\r\n                                  activeTTT={this.state.activeTTT}\r\n                                  onClick={(i, j, k) => this.handleClick(i, j, k)}/>\r\n                          </td>\r\n                      </tr>\r\n                  </tbody>\r\n              </table>\r\n          </div>\r\n      );\r\n  }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Board from './components/Board';\r\n\r\nconst lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n];\r\n\r\nReactDOM.render(\r\n    <Board />,\r\n    document.getElementById('root')\r\n);\r\n\r\nexport function calculateTTTWinner(squares) {\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function isTTTFull(squares) {\r\n    let full = true;\r\n    for (let i = 0; i < 9; i += 1) {\r\n        full &= squares[i] !== null;\r\n    }\r\n    return full || (calculateTTTWinner(squares) !== null);\r\n}\r\n\r\nexport function calculateUTTTWinner(squares) {\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (calculateTTTWinner(squares[a])\r\n            && calculateTTTWinner(squares[a]) === calculateTTTWinner(squares[b])\r\n            && calculateTTTWinner(squares[a]) === calculateTTTWinner(squares[c])) {\r\n                return calculateTTTWinner(squares[a]);\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function isUTTTFull(squares) {\r\n    let full = true;\r\n    for (let i = 0; i < 9; i += 1) {\r\n        full &= calculateTTTWinner(squares[i]) !== null;\r\n    }\r\n    return full || (calculateUTTTWinner(squares) !== null);\r\n}\r\n\r\nexport function calculateUUTTTWinner(squares) {\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (calculateUTTTWinner(squares[a])\r\n            && calculateUTTTWinner(squares[a]) === calculateUTTTWinner(squares[b])\r\n            && calculateUTTTWinner(squares[a]) === calculateUTTTWinner(squares[c])) {\r\n                return calculateUTTTWinner(squares[a]);\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function isUUTTTFull(squares) {\r\n    let full = true;\r\n    for (let i = 0; i < 9; i += 1) {\r\n        full &= calculateUTTTWinner(squares[i]) !== null;\r\n    }\r\n    return full || (calculateUUTTTWinner(squares) !== null);\r\n}\r\n\r\nexport function getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n"],"sourceRoot":""}