{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","TTT","i","calculateTTTWinner","this","squares","boardNumber","activeTTT","value","handleClick","table_rows","table_row","j","color","push","style","renderSquare","React","Component","UTTT","calculateUTTTWinner","activeUTTT","TTTColor","xIsNext","k","UUTTT","arr0","arr1","arr2","state","l","slice","isUTTTFull","full","isTTTFull","setState","lines","length","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d1591a2.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className='square' onClick={props.onClick} />\r\n    );\r\n}\r\n\r\nclass TTT extends React.Component {\r\n    handleClick(i) {\r\n        if (calculateTTTWinner(this.props.squares) || this.props.squares[i]\r\n            || (this.props.boardNumber !== this.props.activeTTT && this.props.activeTTT !== null)) {\r\n            return;\r\n        }\r\n        this.props.onClick(i);\r\n    }\r\n\r\n    renderSquare(i) {\r\n        return (\r\n            <Square\r\n                value={this.props.squares[i]}\r\n                onClick={() => this.handleClick(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let table_rows = [];\r\n        for (let i = 0; i < 3; i += 1) {\r\n            let table_row = [];\r\n            for (let j = 0; j < 3; j += 1) {\r\n                let color = this.props.squares[3 * i + j];\r\n                if (color !== 'blue' && color !== 'red') {\r\n                    color = 'white'\r\n                }\r\n                table_row.push(\r\n                    <td style={{'background' : color}}>\r\n                        {this.renderSquare(3 * i + j)}\r\n                    </td>\r\n                );\r\n            }\r\n            table_rows.push(\r\n                <tr className='board-row'>\r\n                    {table_row}\r\n                </tr>\r\n            );\r\n        }\r\n\r\n        return (<table className='small'>{table_rows}</table>);\r\n    }\r\n}\r\n\r\nclass UTTT extends React.Component {\r\n    handleClick(i, j) {\r\n        if (calculateUTTTWinner(this.props.squares) || (this.props.boardNumber !== this.props.activeUTTT && this.props.activeUTTT !== null)) {\r\n            return;\r\n        }\r\n        this.props.onClick(i, j);\r\n    }\r\n\r\n    render() {\r\n        let table_rows = [];\r\n        for (let i = 0; i < 3; i += 1) {\r\n            let table_row = [];\r\n            for (let j = 0; j < 3; j += 1) {\r\n                let TTTColor = calculateTTTWinner(this.props.squares[ 3 * i + j]);\r\n                if (!TTTColor) {\r\n                    TTTColor = 'white'\r\n                }\r\n                table_row.push(\r\n                    <td style={{'background' : TTTColor}}>\r\n                        <TTT\r\n                            xIsNext={this.props.xIsNext}\r\n                            boardNumber={3 * i + j}\r\n                            squares={this.props.squares[3 * i + j]}\r\n                            activeTTT={this.props.activeTTT}\r\n                            onClick={(k) => this.handleClick(3 * i + j, k)}\r\n                        />\r\n                    </td>\r\n                );\r\n            }\r\n            table_rows.push(\r\n                <tr>\r\n                    {table_row}\r\n                </tr>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <table>\r\n                    {table_rows}\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass UUTTT extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        let arr0 = [];\r\n        for (let i = 0; i < 9; i += 1) {\r\n            let arr1 = [];\r\n            for (let j = 0; j < 9; j += 1) {\r\n                let arr2 = [];\r\n                for (let k = 0; k < 9; k += 1) {\r\n                    arr2.push(null);\r\n                }\r\n                arr1.push(arr2);\r\n            }\r\n            arr0.push(arr1);\r\n        }\r\n        this.state = {\r\n            xIsNext: true,\r\n            activeTTT: null,\r\n            activeUTTT: null,\r\n            squares: arr0,\r\n        };\r\n    };\r\n\r\n    render() {\r\n        let table_rows = [];\r\n        for (let i = 0; i < 3; i += 1) {\r\n            let table_row = [];\r\n            for (let j = 0; j < 3; j += 1) {\r\n                table_row.push(\r\n                    <td style={{'background' : calculateUTTTWinner(this.state.squares[3 * i + j])}}>\r\n                        <UTTT\r\n                            xIsNext={this.state.xIsNext}\r\n                            boardNumber={3 * i + j}\r\n                            squares={this.state.squares[3 * i + j]}\r\n                            activeTTT={this.state.activeTTT}\r\n                            activeUTTT={this.state.activeUTTT}\r\n                            onClick={(k, l) => this.handleClick(3 * i + j, k, l)}\r\n                        />\r\n                    </td>\r\n                );\r\n            }\r\n            table_rows.push(\r\n                <tr>\r\n                    {table_row}\r\n                </tr>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <table>\r\n                    {table_rows}\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleClick(i, j, k) {\r\n        const squares = this.state.squares.slice();\r\n        squares[i][j][k] = this.state.xIsNext ? 'blue' : 'red';\r\n        let activeUTTT;\r\n        let activeTTT;\r\n        // if (calculateTTTWinner(squares[i][j])) {\r\n        //     if (calculateUTTTWinner(squares[j]) || isUTTTFull(squares[j])) {\r\n        //         activeUTTT = null;\r\n        //     } else {\r\n        //         activeUTTT = j;\r\n        //     }\r\n        //     activeTTT = null;\r\n        // } else if (calculateTTTWinner(squares[i][k]) || isTTTFull(squares[i][k])) {\r\n        //     activeUTTT = i;\r\n        //     activeTTT = null;\r\n        // } else {\r\n        //     activeUTTT = i;\r\n        //     activeTTT = k;\r\n        // }\r\n        if (calculateTTTWinner(squares[i][j])) {\r\n            activeTTT = null;\r\n            if (calculateUTTTWinner(squares[j]) || isUTTTFull(squares[j])) {\r\n                activeUTTT = null;\r\n            } else {\r\n                activeUTTT = j;\r\n            }\r\n        } else {\r\n            if (calculateTTTWinner(squares[i][k]) || isTTTFull(squares[i][k])) {\r\n                activeTTT = null;\r\n                if (calculateUTTTWinner(squares[i]) || isUTTTFull(squares[i])) {\r\n                    activeUTTT = null;\r\n                } else {\r\n                    activeUTTT = i;\r\n                }\r\n            } else {\r\n                activeTTT = k;\r\n                activeUTTT = i;\r\n            }\r\n        }\r\n        this.setState({\r\n            xIsNext: !this.state.xIsNext,\r\n            activeTTT: activeTTT,\r\n            activeUTTT: activeUTTT,\r\n            squares: squares,\r\n        });\r\n    }\r\n}\r\n\r\n// ========================================\r\n\r\nconst lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n];\r\n\r\nReactDOM.render(\r\n    <UUTTT />,\r\n    document.getElementById('root')\r\n);\r\n\r\nfunction calculateTTTWinner(squares) {\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction isTTTFull(squares) {\r\n    let full = true;\r\n    for (let i = 0; i < 9; i += 1) {\r\n        full &= squares[i] !== null;\r\n    }\r\n    return full;\r\n}\r\n\r\nfunction calculateUTTTWinner(squares) {\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (calculateTTTWinner(squares[a])\r\n            && calculateTTTWinner(squares[a]) === calculateTTTWinner(squares[b])\r\n            && calculateTTTWinner(squares[a]) === calculateTTTWinner(squares[c])) {\r\n                return calculateTTTWinner(squares[a]);\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction isUTTTFull(squares) {\r\n    let full = true;\r\n    for (let i = 0; i < 9; i += 1) {\r\n        full &= calculateTTTWinner(squares[i]) !== null;\r\n    }\r\n    return full;\r\n}\r\n"],"sourceRoot":""}