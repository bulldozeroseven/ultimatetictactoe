{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","TTT","i","calculateTTTWinner","this","squares","boardNumber","activeTTT","value","handleClick","table_rows","table_row","j","color","push","style","renderSquare","React","Component","UTTT","activeUTTT","bgcolor","xIsNext","k","UUTTT","calculateUTTTWinner","state","calculateUUTTTWinner","l","Board","arr0","arr1","arr2","newState","setState","winner","slice","isUTTTFull","full","isTTTFull","updateState","isUUTTTFull","window","confirm","a","getRandomInt","c","b","foundWin","lines","length","min","max","Math","ceil","floor","random","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.28dbb34b.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className='square' onClick={props.onClick} />\r\n    );\r\n}\r\n\r\nclass TTT extends React.Component {\r\n    handleClick(i) {\r\n        if (calculateTTTWinner(this.props.squares) || this.props.squares[i]\r\n            || (this.props.boardNumber !== this.props.activeTTT && this.props.activeTTT !== null)) {\r\n            return;\r\n        }\r\n        this.props.onClick(i);\r\n    }\r\n\r\n    renderSquare(i) {\r\n        return (\r\n            <Square\r\n                value={this.props.squares[i]}\r\n                onClick={() => this.handleClick(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let table_rows = [];\r\n        for (let i = 0; i < 3; i += 1) {\r\n            let table_row = [];\r\n            for (let j = 0; j < 3; j += 1) {\r\n                let color = this.props.squares[3 * i + j];\r\n                if (color !== 'blue' && color !== 'red') {\r\n                    color = 'white'\r\n                }\r\n                table_row.push(\r\n                    <td style={{'background' : color}}>\r\n                        {this.renderSquare(3 * i + j)}\r\n                    </td>\r\n                );\r\n            }\r\n            table_rows.push(\r\n                <tr className='board-row'>\r\n                    {table_row}\r\n                </tr>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <table className='small'>\r\n                <tbody>\r\n                    {table_rows}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nclass UTTT extends React.Component {\r\n    handleClick(i, j) {\r\n        if (this.props.boardNumber !== this.props.activeUTTT && this.props.activeUTTT !== null) {\r\n            return;\r\n        }\r\n        this.props.onClick(i, j);\r\n    }\r\n\r\n    render() {\r\n        let table_rows = [];\r\n        for (let i = 0; i < 3; i += 1) {\r\n            let table_row = [];\r\n            for (let j = 0; j < 3; j += 1) {\r\n                let bgcolor = calculateTTTWinner(this.props.squares[ 3 * i + j]);\r\n                if (!bgcolor) {\r\n                    if (this.props.activeTTT === 3 * i + j && this.props.activeUTTT === this.props.boardNumber) {\r\n                        bgcolor = \"yellow\"\r\n                    } else {\r\n                        bgcolor = \"white\"\r\n                    }\r\n                }\r\n                table_row.push(\r\n                    <td style={{'background' : bgcolor}}>\r\n                        <TTT\r\n                            xIsNext={this.props.xIsNext}\r\n                            boardNumber={3 * i + j}\r\n                            squares={this.props.squares[3 * i + j]}\r\n                            activeTTT={this.props.activeTTT}\r\n                            activeUTTT={this.props.activeUTTT}\r\n                            onClick={(k) => this.handleClick(3 * i + j, k)}\r\n                        />\r\n                    </td>\r\n                );\r\n            }\r\n            table_rows.push(\r\n                <tr>\r\n                    {table_row}\r\n                </tr>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <table>\r\n                <tbody>\r\n                    {table_rows}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nclass UUTTT extends React.Component {\r\n    \r\n    handleClick(i, j, k) {\r\n        this.props.onClick(i, j, k);\r\n    }\r\n\r\n    render() {\r\n        let table_rows = [];\r\n        for (let i = 0; i < 3; i += 1) {\r\n            let table_row = [];\r\n            for (let j = 0; j < 3; j += 1) {\r\n                let bgcolor = calculateUTTTWinner(this.props.state.squares[3 * i + j]);\r\n                if (!bgcolor) {\r\n                    if (this.props.state.activeTTT === null \r\n                        && this.props.state.activeUTTT === 3 * i + j\r\n                        && !calculateUUTTTWinner(this.props.state.squares)) {\r\n                        bgcolor = \"yellow\"\r\n                    } else {\r\n                        bgcolor = \"white\"\r\n                    }\r\n                }\r\n                table_row.push(\r\n                    <td style={{'background' : bgcolor}}>\r\n                        <UTTT\r\n                            xIsNext={this.props.state.xIsNext}\r\n                            boardNumber={3 * i + j}\r\n                            squares={this.props.state.squares[3 * i + j]}\r\n                            activeTTT={this.props.state.activeTTT}\r\n                            activeUTTT={this.props.state.activeUTTT}\r\n                            onClick={(k, l) => this.handleClick(3 * i + j, k, l)}\r\n                        />\r\n                    </td>\r\n                );\r\n            }\r\n            table_rows.push(\r\n                <tr>\r\n                    {table_row}\r\n                </tr>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <table>\r\n                <tbody>\r\n                    {table_rows}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nclass Board extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        let arr0 = [];\r\n        for (let i = 0; i < 9; i += 1) {\r\n            let arr1 = [];\r\n            for (let j = 0; j < 9; j += 1) {\r\n                let arr2 = [];\r\n                for (let k = 0; k < 9; k += 1) {\r\n                    arr2.push(null);\r\n                }\r\n                arr1.push(arr2);\r\n            }\r\n            arr0.push(arr1);\r\n        }\r\n        this.state = this.newState();\r\n    };\r\n\r\n    newState() {\r\n        let arr0 = [];\r\n        for (let i = 0; i < 9; i += 1) {\r\n            let arr1 = [];\r\n            for (let j = 0; j < 9; j += 1) {\r\n                let arr2 = [];\r\n                for (let k = 0; k < 9; k += 1) {\r\n                    arr2.push(null);\r\n                }\r\n                arr1.push(arr2);\r\n            }\r\n            arr0.push(arr1);\r\n        }\r\n        return({\r\n            xIsNext: true,\r\n            activeTTT: null,\r\n            activeUTTT: null,\r\n            squares: arr0,\r\n        });\r\n    }\r\n\r\n    updateState(xIsNext, activeTTT, activeUTTT, squares) {\r\n        this.setState({\r\n            xIsNext: xIsNext,\r\n            activeTTT: activeTTT,\r\n            activeUTTT: activeUTTT,\r\n            squares: squares,\r\n        });\r\n    }\r\n\r\n    handleClick(i, j, k) {\r\n        if ((calculateUTTTWinner(this.state.squares[i]) || calculateTTTWinner(this.state.squares[i][j])) !== null) {\r\n            return\r\n        }\r\n        const squares = this.state.squares.slice();\r\n        squares[i][j][k] = this.state.xIsNext ? 'blue' : 'red';\r\n        let activeUTTT;\r\n        let activeTTT;\r\n        if (calculateTTTWinner(squares[i][j]) !== null) {\r\n            activeTTT = null;\r\n            if ((calculateUTTTWinner(squares[j]) !== null) || isUTTTFull(squares[j])) {\r\n                activeUTTT = null;\r\n            } else {\r\n                activeUTTT = j;\r\n            }\r\n        } else {\r\n            if ((calculateTTTWinner(squares[i][k]) !== null) || isTTTFull(squares[i][k])) {\r\n                activeTTT = null;\r\n                if ((calculateUTTTWinner(squares[i]) !== null) || isUTTTFull(squares[i])) {\r\n                    activeUTTT = null;\r\n                } else {\r\n                    activeUTTT = i;\r\n                }\r\n            } else {\r\n                activeTTT = k;\r\n                activeUTTT = i;\r\n            }\r\n        }\r\n        this.updateState(!this.state.xIsNext, activeTTT, activeUTTT, squares);\r\n        let winner;\r\n        if (calculateUUTTTWinner(this.state.squares) === 'blue') {\r\n            winner = \"you won!\";\r\n        } else if (calculateUUTTTWinner(this.state.squares) === 'red') {\r\n            winner = \"you lost!\";\r\n        } else if (isUUTTTFull(this.state.squares)) {\r\n            winner = \"you tied!\";\r\n        }\r\n        if (winner) {\r\n            let restart = window.confirm(winner + '\\n' + \"do you want to restart?\");\r\n            if (restart) {\r\n                this.setState(this.newState())\r\n            }\r\n        } \r\n        return;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (!this.state.xIsNext) {\r\n            let a = this.state.activeUTTT;\r\n            if (a === null) {\r\n                a = getRandomInt(0, 8);\r\n            }\r\n            let b = this.state.activeTTT;\r\n            while (b === null || calculateTTTWinner(this.state.squares[a][b]) !== null) {\r\n                b = getRandomInt(0, 8);\r\n            }\r\n            let c;\r\n            let i = 0;\r\n            let foundWin = false;\r\n            while (i < 9 && !foundWin) {\r\n                if (this.state.squares[a][b][i] === null) {\r\n                    const squares = [...this.state.squares[a][b]];\r\n                    squares[i] = 'red';\r\n                    if (calculateTTTWinner(squares) === 'red') {\r\n                        c = i;\r\n                        foundWin = true;\r\n                    }\r\n                }\r\n                i++;\r\n            }\r\n            if (!foundWin) {\r\n                c = getRandomInt(0, 8);\r\n                while (this.state.squares[a][b][c] !== null) {\r\n                    c = getRandomInt(0, 8);\r\n                }\r\n            }\r\n            this.handleClick(a, b, c);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let bgcolor = calculateUUTTTWinner(this.state.squares);\r\n        if (!bgcolor) {\r\n            if (this.state.activeUTTT === null) {\r\n                bgcolor = \"yellow\"\r\n            } else {\r\n                bgcolor = \"white\"\r\n            }\r\n        }\r\n        return (\r\n            <div>\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td style={{'background' : bgcolor}}>\r\n                                <UUTTT \r\n                                    state={this.state}\r\n                                    onClick={(i, j, k) => this.handleClick(i, j, k)}/>\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// ========================================\r\n\r\nconst lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n];\r\n\r\nReactDOM.render(\r\n    <Board />,\r\n    document.getElementById('root')\r\n);\r\n\r\nfunction calculateTTTWinner(squares) {\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction isTTTFull(squares) {\r\n    let full = true;\r\n    for (let i = 0; i < 9; i += 1) {\r\n        full &= squares[i] !== null;\r\n    }\r\n    return full;\r\n}\r\n\r\nfunction calculateUTTTWinner(squares) {\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (calculateTTTWinner(squares[a])\r\n            && calculateTTTWinner(squares[a]) === calculateTTTWinner(squares[b])\r\n            && calculateTTTWinner(squares[a]) === calculateTTTWinner(squares[c])) {\r\n                return calculateTTTWinner(squares[a]);\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction isUTTTFull(squares) {\r\n    let full = true;\r\n    for (let i = 0; i < 9; i += 1) {\r\n        full &= calculateTTTWinner(squares[i]) !== null;\r\n    }\r\n    return full;\r\n}\r\n\r\nfunction calculateUUTTTWinner(squares) {\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (calculateUTTTWinner(squares[a])\r\n            && calculateUTTTWinner(squares[a]) === calculateUTTTWinner(squares[b])\r\n            && calculateUTTTWinner(squares[a]) === calculateUTTTWinner(squares[c])) {\r\n                return calculateUTTTWinner(squares[a]);\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction isUUTTTFull(squares) {\r\n    let full = true;\r\n    for (let i = 0; i < 9; i += 1) {\r\n        full &= calculateUTTTWinner(squares[i]) !== null;\r\n    }\r\n    return full;\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n"],"sourceRoot":""}